generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String                   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    Role                     @default(USER)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  applicationReviews      ApplicationReview[]
  comments                Comment[]
  meetings                Meeting[]
  notifications           Notification[]
  reviews                 Review[]
  sessions                Session[]
  sponsorships            Sponsorship[]            @relation("SponsorToSponsorship")
  sponsorshipApplications SponsorshipApplication[]
  startups                Startup[]                @relation("FounderToStartup")
  startupCalls            StartupCall[]
  callApplications        StartupCallApplication[]
  tasks                   Task[]                   @relation("AssigneeToTask")
  createdTasks            Task[]                   @relation("CreatorToTask")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Startup {
  id               String                   @id @default(cuid())
  name             String
  description      String
  pitch            String
  industry         String[]
  stage            String
  website          String?
  logo             String?
  founderId        String
  status           Status                   @default(SUBMITTED)
  score            Float?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  comments         Comment[]
  documents        Document[]
  financials       Financial[]
  meetings         Meeting[]
  milestones       Milestone[]
  reviews          Review[]
  sponsorships     Sponsorship[]
  founder          User                     @relation("FounderToStartup", fields: [founderId], references: [id])
  callApplications StartupCallApplication[]
  tasks            Task[]
}

model Review {
  id             String   @id @default(cuid())
  startupId      String
  reviewerId     String
  score          Float
  feedback       String
  recommendation String
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviewer       User     @relation(fields: [reviewerId], references: [id])
  startup        Startup  @relation(fields: [startupId], references: [id])
}

model Milestone {
  id            String    @id @default(cuid())
  startupId     String
  title         String
  description   String
  dueDate       DateTime
  completedDate DateTime?
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startup       Startup   @relation(fields: [startupId], references: [id])
  tasks         Task[]
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String
  status        String
  priority      String
  startDate     DateTime
  dueDate       DateTime
  completedDate DateTime?
  startupId     String
  milestoneId   String?
  assigneeId    String?
  creatorId     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  assignee      User?      @relation("AssigneeToTask", fields: [assigneeId], references: [id])
  creator       User       @relation("CreatorToTask", fields: [creatorId], references: [id])
  milestone     Milestone? @relation(fields: [milestoneId], references: [id])
  startup       Startup    @relation(fields: [startupId], references: [id])
}

model Document {
  id          String   @id @default(cuid())
  startupId   String
  name        String
  description String?
  fileUrl     String
  fileType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startup     Startup  @relation(fields: [startupId], references: [id])
}

model Sponsorship {
  id          String    @id @default(cuid())
  startupId   String
  sponsorId   String
  amount      Float
  currency    String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String
  sponsor     User      @relation("SponsorToSponsorship", fields: [sponsorId], references: [id])
  startup     Startup   @relation(fields: [startupId], references: [id])
}

model Financial {
  id          String   @id @default(cuid())
  startupId   String
  type        String
  category    String
  amount      Float
  currency    String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startup     Startup  @relation(fields: [startupId], references: [id])
}

model Meeting {
  id          String   @id @default(cuid())
  startupId   String
  userId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  meetingUrl  String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startup     Startup  @relation(fields: [startupId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  startupId String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentToReply", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToReply")
  startup   Startup   @relation(fields: [startupId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model StartupCall {
  id                       String                   @id @default(cuid())
  title                    String
  description              String
  status                   StartupCallStatus        @default(DRAFT)
  applicationDeadline      DateTime
  publishedDate            DateTime?
  industry                 String
  location                 String
  fundingAmount            String?
  requirements             String[]
  eligibilityCriteria      String[]
  selectionProcess         String[]
  aboutSponsor             String?
  applicationProcess       String
  createdById              String
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  budgets                  Budget[]
  Event                    Event[]
  reviewCriteria           ReviewCriteria[]
  sponsorshipOpportunities SponsorshipOpportunity[]
  createdBy                User                     @relation(fields: [createdById], references: [id])
  applications             StartupCallApplication[]
}

model StartupCallApplication {
  id                   String                       @id @default(cuid())
  callId               String
  startupId            String?
  userId               String
  startupName          String
  website              String?
  foundingDate         DateTime
  teamSize             String
  industry             String
  stage                String
  description          String
  problem              String
  solution             String
  traction             String?
  businessModel        String
  funding              String?
  useOfFunds           String
  competitiveAdvantage String
  founderBio           String
  pitchDeckUrl         String?
  financialsUrl        String?
  status               StartupCallApplicationStatus @default(SUBMITTED)
  reviewsCompleted     Int                          @default(0)
  reviewsTotal         Int                          @default(3)
  submittedAt          DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  reviews              ApplicationReview[]
  call                 StartupCall                  @relation(fields: [callId], references: [id])
  startup              Startup?                     @relation(fields: [startupId], references: [id])
  user                 User                         @relation(fields: [userId], references: [id])
}

model ApplicationReview {
  id              String                 @id @default(cuid())
  applicationId   String
  reviewerId      String
  score           Float?
  innovationScore Float?
  marketScore     Float?
  teamScore       Float?
  executionScore  Float?
  feedback        String?
  status          ReviewStatus           @default(PENDING)
  assignedAt      DateTime               @default(now())
  dueDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  application     StartupCallApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer        User                   @relation(fields: [reviewerId], references: [id])
  criteriaReviews CriteriaReview[]

  @@unique([applicationId, reviewerId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Budget {
  id            String           @id @default(cuid())
  startupCallId String
  title         String
  description   String?
  totalAmount   Float
  currency      String
  fiscalYear    String
  status        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  startupCall   StartupCall      @relation(fields: [startupCallId], references: [id])
  categories    BudgetCategory[]
  expenses      Expense[]
}

model BudgetCategory {
  id              String    @id @default(cuid())
  budgetId        String
  name            String
  description     String?
  allocatedAmount Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  budget          Budget    @relation(fields: [budgetId], references: [id])
  expenses        Expense[]
}

model Expense {
  id          String          @id @default(cuid())
  budgetId    String
  categoryId  String?
  title       String
  description String?
  amount      Float
  currency    String
  date        DateTime
  receipt     String?
  status      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  budget      Budget          @relation(fields: [budgetId], references: [id])
  category    BudgetCategory? @relation(fields: [categoryId], references: [id])
}

model SponsorshipOpportunity {
  id            String                   @id @default(cuid())
  startupCallId String
  title         String
  description   String
  benefits      String[]
  minAmount     Float
  maxAmount     Float
  currency      String
  status        String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  applications  SponsorshipApplication[]
  startupCall   StartupCall              @relation(fields: [startupCallId], references: [id])
}

model SponsorshipApplication {
  id            String                 @id @default(cuid())
  opportunityId String
  sponsorId     String
  amount        Float
  currency      String
  message       String?
  status        String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  opportunity   SponsorshipOpportunity @relation(fields: [opportunityId], references: [id])
  sponsor       User                   @relation(fields: [sponsorId], references: [id])
}

model ReviewCriteria {
  id              String           @id @default(cuid())
  startupCallId   String
  name            String
  description     String
  weight          Float
  minimumScore    Float
  maximumScore    Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  criteriaReviews CriteriaReview[]
  startupCall     StartupCall      @relation(fields: [startupCallId], references: [id])
}

model CriteriaReview {
  id         String            @id @default(cuid())
  criteriaId String
  reviewId   String
  score      Float
  comment    String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  criteria   ReviewCriteria    @relation(fields: [criteriaId], references: [id])
  review     ApplicationReview @relation(fields: [reviewId], references: [id])
}

model Advertisement {
  id            String   @id @default(cuid())
  title         String
  content       String
  imageUrl      String?
  scheduledDate DateTime
  platforms     String[] @default([])
  status        String   @default("draft")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Event {
  id            String       @id @default(cuid())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  location      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isVirtual     Boolean      @default(false)
  startupCallId String?
  type          EventType
  virtualLink   String?
  imageUrl      String?
  StartupCall   StartupCall? @relation(fields: [startupCallId], references: [id])
}

enum Role {
  USER
  ENTREPRENEUR
  REVIEWER
  SPONSOR
  ADMIN
}

enum Status {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  COMPLETED
}

enum StartupCallStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum StartupCallApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  WITHDRAWN
}

enum EventType {
  WORKSHOP
  WEBINAR
  DEADLINE
  ANNOUNCEMENT
  NETWORKING
  OTHER
}
