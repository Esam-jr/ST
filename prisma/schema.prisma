// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  startups      Startup[]       @relation("FounderToStartup")
  reviews       Review[]
  comments      Comment[]
  sponsorships  Sponsorship[]   @relation("SponsorToSponsorship")
  notifications Notification[]
  meetings      Meeting[]
  tasks         Task[]          @relation("AssigneeToTask")
  createdTasks  Task[]          @relation("CreatorToTask")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Role enum for user permissions
enum Role {
  USER
  ENTREPRENEUR
  REVIEWER
  SPONSOR
  ADMIN
}

// Startup model for submitted ideas
model Startup {
  id              String    @id @default(cuid())
  name            String
  description     String    @db.Text
  pitch           String    @db.Text
  industry        String[]
  stage           String
  website         String?
  logo            String?
  founderId       String
  status          Status    @default(SUBMITTED)
  score           Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  founder         User      @relation("FounderToStartup", fields: [founderId], references: [id])
  reviews         Review[]
  milestones      Milestone[]
  tasks           Task[]
  documents       Document[]
  sponsorships    Sponsorship[]
  meetings        Meeting[]
  financials      Financial[]
  comments        Comment[]
}

// Status enum for startup progress
enum Status {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  COMPLETED
}

// Review model for evaluation
model Review {
  id              String    @id @default(cuid())
  startupId       String
  reviewerId      String
  score           Float
  feedback        String    @db.Text
  recommendation  String    @db.Text
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  reviewer        User      @relation(fields: [reviewerId], references: [id])
}

// Milestone model for tracking progress
model Milestone {
  id              String    @id @default(cuid())
  startupId       String
  title           String
  description     String    @db.Text
  dueDate         DateTime
  completedDate   DateTime?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  tasks           Task[]
}

// Task model for project management
model Task {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  status          String
  priority        String
  startDate       DateTime
  dueDate         DateTime
  completedDate   DateTime?
  startupId       String
  milestoneId     String?
  assigneeId      String?
  creatorId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  milestone       Milestone? @relation(fields: [milestoneId], references: [id])
  assignee        User?     @relation("AssigneeToTask", fields: [assigneeId], references: [id])
  creator         User      @relation("CreatorToTask", fields: [creatorId], references: [id])
}

// Document model for file storage
model Document {
  id              String    @id @default(cuid())
  startupId       String
  name            String
  description     String?
  fileUrl         String
  fileType        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
}

// Sponsorship model for funding
model Sponsorship {
  id              String    @id @default(cuid())
  startupId       String
  sponsorId       String
  amount          Float
  currency        String
  description     String?
  status          String
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  sponsor         User      @relation("SponsorToSponsorship", fields: [sponsorId], references: [id])
}

// Financial model for budget tracking
model Financial {
  id              String    @id @default(cuid())
  startupId       String
  type            String
  category        String
  amount          Float
  currency        String
  description     String?
  date            DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
}

// Meeting model for scheduling
model Meeting {
  id              String    @id @default(cuid())
  startupId       String
  userId          String
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  location        String?
  meetingUrl      String?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}

// Comment model for discussions
model Comment {
  id              String    @id @default(cuid())
  startupId       String
  userId          String
  content         String    @db.Text
  parentId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  startup         Startup   @relation(fields: [startupId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  parent          Comment?  @relation("CommentToReply", fields: [parentId], references: [id])
  replies         Comment[] @relation("CommentToReply")
}

// Notification model for alerts
model Notification {
  id              String    @id @default(cuid())
  userId          String
  title           String
  message         String
  type            String
  read            Boolean   @default(false)
  link            String?
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id])
}

// Event model for calendar
model Event {
  id              String    @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  location        String?
  eventUrl        String?
  isPublic        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
